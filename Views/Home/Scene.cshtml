@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    List<SelectListItem> projectId = ViewBag.SelectItems as List<SelectListItem>;
    IDictionary<int, string> projects = ViewBag.Projects as Dictionary<int, string>;
}
<div class="row">&nbsp;</div>
<div class="alert alert-danger">
    <b>* 说明：单击表格即可编辑内容，编辑完成后单击【修改】按钮即可</b>
</div>
<div class="table-box" style="margin: 20px;">
    <div id="toolbar">
        <button id="button" class="btn btn-default">创建场景</button>
        <button id="getTableData" class="btn btn-default" style="display:none">获取数据</button>
        <span style="color:red;"></span>
    </div>
    <table id="table"></table>
</div>

<link rel="stylesheet" href="~/Content/bootstrap-table.min.css">
<script src="~/Scripts/jquery-3.3.1.min.js"></script>
<script src="~/Scripts/bootstrap.min.js"></script>
<script src="~/Scripts/bootstrap-switch.min.js"></script>
<script src="~/Scripts/bootstrap-table.min.js"></script>
<script src="~/Scripts/bootstrap-table-zh-CN.min.js"></script>
<script src="~/layer/layer.js"></script>
<script src="~/Scripts/hostLib.js"></script>

<script type="text/javascript">

    let _project_list = @Html.Raw(ViewBag.Projects);
    let host = hostAddr.scene;
    $(function () {
        let $table = $('#table');
        let $button = $('#button');
        let $getTableData = $('#getTableData');

        // 新增一行
        $button.click(function () {
            $table.bootstrapTable('insertRow', {
                index: 10,
                row: {
                    projectId: 0,
                    funcCode: '',
                    mergeName: '',
                    integrateId: '',
                    mergeMemo: '',
                    backPic: '',
                    showSet: '',
                    borderLine: true,
                    showSun: false,
                    camera: '',
                    defApi: '',
                    mergeTime: ''
                }
            });
            $.fn.delayRender(10);
        });

        $getTableData.click(function () {
            console.log($table.bootstrapTable('getData'));
        });

        // 存储表格变更数据
        $.fn.saveData = (index, field, value) => {
            $table.bootstrapTable('updateCell', {
                index: index,       //行索引
                field: field,       //列名
                value: value        //cell值
            });
        }

        $.fn.borderFormatter = (value, row, index) => {
            let __value = row['borderLine'];
            let __content = '';
            if (__value) {
                __content = '<input class="_switch_" id="border' + row['sceneId'] + '"  data-type = "border"  data-scene-id = ' + row['sceneId'] + ' type="checkbox" data-on-text="显示" data-off-text="隐藏"  data-off-color="warning" name="border_checkbox" checked>';
            } else {
                __content = '<input class="_switch_" id="border' + row['sceneId'] + '"  data-type = "border" data-scene-id = ' + row['sceneId'] + ' type="checkbox" data-on-text="显示" data-off-text="隐藏"  data-off-color="warning" name="border_checkbox">';
            }
            return [__content];
        }

        $.fn.roundFormatter = (value, row, index) => {
            let __value = row['showSun'];
            let __content = '';
            if (__value) {
                __content = '<input class="_switch_" id="round' + row['sceneId'] + '"  data-type = "round" data-scene-id = ' + row['sceneId'] + ' type="checkbox" data-on-text="启用" data-off-text="禁用" data-on-color="success" data-off-color="danger" name="border_checkbox" checked>';
            } else {
                __content = '<input class="_switch_" id="round' + row['sceneId'] + '"  data-type = "round" data-scene-id = ' + row['sceneId'] + ' type="checkbox" data-on-text="启用" data-off-text="禁用" data-on-color="success" data-off-color="danger" name="border_checkbox">';
            }
            return [__content];
        }

        // 修改场景配置
        $.fn.updateRowData = (id) => {
            let __row = $table.bootstrapTable('getRowByUniqueId', id);
            // 数据转换
            __row['borderLine'] == true ? __row['borderLine'] = 1 : __row['borderLine'] = 0;
            __row['showSun'] == true ? __row['showSun'] = 1 : __row['showSun'] = 0;
            let options = {
                url: host + "updateScene",
                data: JSON.stringify(__row),
                type: 'PUT',
                contentType: 'application/json',
                success: (response) => {
                    if (response.code === 20000) {
                        layer.msg("场景[" + __row['mergeName'] + "]更新成功！");
                    } else {
                        layer.msg(response.message);
                    }
                }
            };
            console.log(__row);
            $.ajax(options);
        }

        // 创建场景配置
        $.fn.createRowData = () => {
            let __count = $table.bootstrapTable('getData').length;
            let row_data = $table.bootstrapTable('getData')[__count - 1];
            row_data['borderLine'] == true ? row_data['borderLine'] = 1 : row_data['borderLine'] = 0;
            row_data['showSun'] == true ? row_data['showSun'] = 1 : row_data['showSun'] = 0;
            console.log($table.bootstrapTable('getData')[__count - 1]);
            let options = {
                url: host + "createScene",
                data: JSON.stringify(row_data),
                type: 'POST',
                contentType: 'application/json',
                success: (response) => {
                    if (response.code === 20000) {
                        layer.msg("场景[" + row_data['mergeName'] + "]创建成功！", { icon: 1 } ,() => {
                            window.location.reload(true);
                        });
                    } else {
                        layer.msg(response.message);
                    }
                }
            };
            $.ajax(options);
        }

        // 按钮样式
        $.fn.buttonFormatter = (value, row, index) => {
            let __data = { rowdata: row };
            let __content = '';
            let __txt = '修改';
            let __style = 'btn-warning';
            let __isEdit = row['sceneId'];
            if (!__isEdit) {
                __style = 'btn-success';
                __txt = '保存';
                __content = '<button onclick = "$.fn.createRowData()" class="btn ' + __style + ' btn-small">' + __txt + '</button>';
            } else {
                __content = '<button onclick = "$.fn.updateRowData(' + row['sceneId'] + ')" class="btn ' + __style + ' btn-small">' + __txt + '</button>';
            }
            return [__content];
        }

        // 日期格式化
        $.fn.changeDateFormat = (cellval) => {
            var dateVal = cellval + "";
            if (cellval != null && cellval != '') {
                var date = new Date(parseInt(dateVal.replace("/Date(", "").replace(")/", ""), 10));
                var month = date.getMonth() + 1 < 10 ? "0" + (date.getMonth() + 1) : date.getMonth() + 1;
                var currentDate = date.getDate() < 10 ? "0" + date.getDate() : date.getDate();

                var hours = date.getHours() < 10 ? "0" + date.getHours() : date.getHours();
                var minutes = date.getMinutes() < 10 ? "0" + date.getMinutes() : date.getMinutes();
                var seconds = date.getSeconds() < 10 ? "0" + date.getSeconds() : date.getSeconds();

                return date.getFullYear() + "-" + month + "-" + currentDate + " " + hours + ":" + minutes + ":" + seconds;
            }
        }

        // 下拉列表
        $.fn.dropdownFormat = (value, row, index) => {
            let __projects = _project_list;
            let __item = row['projectId'];
            let __drop = '<select onchange="$.fn.selectChange(this)" class="form-control" id="projectId" name="projectId">';
            __drop += row['sceneId'] === undefined ? '<option selected="selected" value="-1">请选择项目</option>' : '<option value="-1">请选择项目</option>';

            for (let i = 0, len = __projects.length; i < len; i++) {
                let __current = __projects[i];
                if (__item && __item === __current.Id) {
                    __drop += '<option selected="selected" value="' + __current.Id + '">' + __current.Name + '</option>';
                } else {
                    __drop += '<option value="' + __current.Id + '">' + __current.Name + '</option>';
                }
            }
            __drop += '</select>';
            return __drop;
        }

        // 下拉列表回调
        $.fn.selectChange = (_this) => {
            console.log($(_this).find("option:selected").val());
            console.log($(_this).parent().parent().data('index'));
            $.fn.saveData($(_this).parent().parent().data('index'), 'projectId', Number($(_this).find("option:selected").val()));
            $.fn.delayRender(10);
        }

        // 相机位参数
        $.fn.cameraFormatter = (value, row, index) => {
            return '<textarea onblur="$.fn.textareaChange(this)" class="form-control" style="width:100%;resize:none" rows="1">'+ row['camera'] +'</textarea>';
        }

        // 修改相机位数据
        $.fn.textareaChange = (_this) => {
            $.fn.saveData($(_this).parent().parent().data('index'), 'camera', $(_this).val());
            $.fn.delayRender(10);
        }

        $.fn.checkBorderTrueValue = (val) => {
            return $("[name='border_checkbox']")[val].checked;
        }

        $.fn.checkBorderFalseValue = (val) => {
            return !$("[name='border_checkbox']")[val].checked;
        }

        $.fn.checkRoundTrueValue = (val) => {
            return $("[name='round_checkbox']")[val].checked;
        }

        $.fn.checkRoundFalseValue = (val) => {
            return !$("[name='round_checkbox']")[val].checked;
        }

        $.fn.initSwitch = () => {
            $("[name='round_checkbox']").filter($.fn.checkRoundTrueValue).bootstrapSwitch("state", true, false);
            $("[name='round_checkbox']").filter($.fn.checkRoundFalseValue).bootstrapSwitch("state", false, false);
            $("[name='border_checkbox']").filter($.fn.checkBorderTrueValue).bootstrapSwitch("state", true, false);
            $("[name='border_checkbox']").filter($.fn.checkBorderFalseValue).bootstrapSwitch("state", false, false);
        }

        // 延时渲染
        $.fn.delayRender = (time) => {
            setTimeout(() => {
                $("input._switch_")
                    .bootstrapSwitch({
                        toggleState: false,
                        onSwitchChange: function (event, state) {
                            console.log("state===", state);
                            let __sceneId = Number(event.target.attributes['data-scene-id'].value);
                            let __type = event.target.attributes['data-type'].value;
                            let __state = state === true ? 1 : 0;
                            let __data = __type === "border" ? { sceneId: __sceneId, borderLine: __state } : { sceneId: __sceneId, showSun: __state };

                            let __update_data = {
                                index: $(event.target).parent().parent().parent().parent()[0].getAttribute('data-index'), //行索引
                                field: "",  //列名
                                value: state  //cell值
                            };
                            if (__type === "border") {
                                __update_data.field = "BorderLine";
                                $table.bootstrapTable('updateCell', __update_data);
                            } else {
                                __update_data.field = "ShowSun";
                                $table.bootstrapTable('updateCell', __update_data);
                            }
                            console.log("__update_data", __update_data);
                            let options = {
                                url: host + "/updateScene",
                                data: JSON.stringify(__data),
                                type: 'PUT',
                                contentType: 'application/json',
                                success: (response) => {
                                    if (response.code === 20000) {
                                        console.log("场景Id[" + __sceneId + "]的[" + __type + "]更新为[" + state + "]成功！");
                                    } else {
                                        layer.msg(response.message);
                                    }
                                }
                            };

                            $.ajax(options);
                            $.fn.initSwitch();
                        }
                    });
                $.fn.initSwitch();
            }, time);
        }

        // 初始化表格
        $table.bootstrapTable({
            url: '/Operation/FetchScenes',
            toolbar: '#toolbar',
            clickEdit: false,
            striped: true,
            undefinedText:'N/A',
            //showToggle: true,
            pagination: true,       //显示分页条
            //showColumns: true,
            //showPaginationSwitch: true,     //显示切换分页按钮
            //showRefresh: true,      //显示刷新按钮
            clickToSelect: false,  //点击row选中radio或CheckBox
            showToggle: false, //是否显示详细视图和列表视图的切换按钮
            cardView: false, //是否显示详细视图
            detailView: false, //是否显示父子表
            uniqueId: 'sceneId',
            columns: [
                {
                    checkbox: true
                },
                {
                    field: 'sceneId',
                    visible: false
                },
                {
                    field: 'funcCode',
                    title: '应用节点',
                    edit: false
                },
                {
                    field: 'mergeName',
                    title: '场景名称'
                },
                {
                    field: 'projectId',
                    title: '所属项目',
                    width: '250px',
                    formatter: $.fn.dropdownFormat
                },
                {
                    field: 'integrateId',
                    title: '模型集成ID',
                    class: 'editable'
                },
                {
                    field: 'mergeMemo',
                    title: '场景说明'
                },
                {
                    field: 'backPic',
                    title: '背景天空盒'
                },
                {
                    field: 'showSet',
                    title: '默认效果设置'
                },
                {
                    field: 'borderLine',
                    title: '显示轮廓线',
                    formatter: $.fn.borderFormatter
                },
                {
                    field: 'showSun',
                    title: '启用环境光照',
                    formatter: $.fn.roundFormatter
                },
                {
                    field: 'camera',
                    title: '默认相机位',
                    formatter:$.fn.cameraFormatter
                },
                {
                    field: 'defApi',
                    title: 'API接口'
                },
                {
                    title: '操作',
                    formatter: $.fn.buttonFormatter
                }
            ],

            onClickCell: (field, value, row, $element) => {
                if (field === "borderLine" || field === "showSun" || field === "projectId" || field === "camera") {
                    return;
                }
                $element.attr('contenteditable', true);
                $element.blur(function () {
                    let index = $element.parent().data('index');
                    let tdValue = $element.text();
                    if (tdValue == value) return;
                    $.fn.saveData(index, field, tdValue);
                    $.fn.delayRender(1);
                })
            }
        });

        $.fn.delayRender(50);
    });
</script>

